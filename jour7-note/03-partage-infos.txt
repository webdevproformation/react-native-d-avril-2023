
si vous avez deux composants qui ont une relation Parent - Enfant 
il est possible de passer des informations du Parent => Enfant (props)
il est possible de passer des informations de l'Enfant => Parent (props => fonction => exécutée dans l'enfant )

function App(){ // Parent
    function calcul(d){}
    return <Text>
        <Btn largeur={10} unite="cm" calcul={calcul} />
    </Text>
}
function Btn(props){ // Enfant 
    function info(){
        console.log(props.largeur)
        console.log(props.unite)
        props.calcul("cm") // le fait exécuté la fonction calcul dans l'enfant => il est possible d'envoyer des infos Enfant => Parent
    }
    return <Button onPress={() => console.log(props.unite) } />
}
function Btn({largeur , unite , calcul}){ // Enfant avec destructuration des props transmis par le Parent
    function info(){
        console.log(largeur)
        console.log(unite)
        calcul("cm")
    }
    return <Button onPress={() => console.log(unite) } />
}

// deux composants frères 

export const Formulaire = () => {
    const profil = { 
        nom : "Alain",
        email : "toto@yahoo.fr",
        password : "123456"
    }
    return <View>
        <TextInput />
        <TextInput />
        <Button />
    </View>
} 

export const Profil = ({nom}) => {
    useState() // localement 
    return <Text>
        { nom }
    </Text>
}

// existe plusieurs manières de partager des informations entre des composants qui ne sont pas de Parent / Enfant 

// Redux 
// Context => la nouvelle manière de procéder 
// le principe de ces techniques => créer un state global => useState global qui peut être partagé entre plusieurs composants quelquesoit le position les uns par rapport aux autres 
=> créer un nouveau projet => npx create-expo-app --template 
jour7-context 

    


