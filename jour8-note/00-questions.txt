import { useState , useEffect } from "react"


function A (){ => élément graphique que l'on va afficher à l'écran 

    const [nb, setNb] = useState(0)
    // nb => state 
    // setNb => permet de modifier la valeur nb ET si elle est exécutée alors rééexécute le composant 

    // logique => traitement 

    function calcul(){
        if(){
            setNb(12)
        }else {
            setNb(20)
        }
        
    } => impact sur le return (render) l'affichage du composant 
    // pour que une fonction stockée dans un composant entraine une modification du render du composant 
    // il faut utiliser des hooks (fonction de react => use...)


    return <Text onPress={calcul}>{nb}</Text>
    return <Text onPress={() => setNb(20)}>{nb}</Text>
}

<p>0</p>

avec du js de base (web)

function calcul(){
    document.querySelector("p").innerHTML = 20
}

document.querySelector("p").addEventListener("click", calcul)

useState() => utilisateur va faire une action (cliquer écrire) => modifier le visuel du composant

=> exécuter un traitement suite à l'aparaition d'un evenement (déclenché par l'utilisateur ou cycle de vie du composant )

// appeler une API (base de données) lorsque le composant est chargé 

useEffect( function(){ // effectuer un traitement suite à une modification
    fetch()
        .then()
        .then( data => setDonnee(data) ) ....
} , []) 

// appeler une API je clique sur le bouton ok d'un formulaire 

useEffect( function(){ // effectuer un traitement suite à une modification
    fetch()
        .then()
        .then( data => setDonnee(data) ) ....
} , [compteur])



// ----------------------
function App(){
    return <View>
        <A />
        <B /> {/* exécuter une fonction (composant) en jsx */}
        <C />
        <D />
    </View>
}


function B(){

    useEffect(function(){
        fetch()
            .then()
            .then( setNb()) // <B /> 
    } , [])

    return <Text>b</Text>
}

// js de base 
function b(){
    // traitement
    // traitement
    // traitement
    // traitement
}

b()

// useState et useEffect => Locale au composant concerné 
si je veux partager des données entre plusieurs composants 

// utiliser useState et useEffect dans une Contexte => partager les données entre plusieurs composants 

// page de connexion 
// afficher le profil 

// hello hello vous m'entendez ???? 
// je redémarre @ toute suite !!! 